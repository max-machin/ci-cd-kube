name: Node.js CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16]  # Version de Node.js à utiliser

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies
      working-directory: ./express-app
      run: npm ci

    - name: Run Tests
      working-directory: ./express-app
      run: npm test
      continue-on-error: false  # Arrête la pipeline si les tests échouent

    - name: Set Docker Tag
      id: vars
      run: echo "TAG=latest" >> $GITHUB_ENV  # Changez 'latest' selon vos besoins

    - name: Build Docker image
      run: |
        docker build -t machinmax13/ci-cd:${{ env.TAG }} ./express-app

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Push Docker image
      run: |
        docker push machinmax13/ci-cd:${{ env.TAG }}

    - name: Deploy to Kubernetes
      run: |
        # Démarrer Minikube
        minikube start
        eval $(minikube docker-env)
        
        # Construire l'image pour Minikube
        docker build -t myapp:latest ./express-app

        # Appliquer les fichiers de déploiement Kubernetes
        kubectl apply -f ./k8s/deployment.yaml
        kubectl apply -f ./k8s/service.yaml

        minikube dashboard

    - name: Send Notification to Google Chat
      run: |
        curl -X POST -H 'Content-Type: application/json' \
        -d '{"text": "✅ Déploiement réussi pour le commit ${{ github.sha }} sur la branche ${{ github.ref_name }}."}' \
        "${{ secrets.GOOGLE_CHAT_WEBHOOK }}"
      if: success()
